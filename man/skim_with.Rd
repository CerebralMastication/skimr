% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/skim.R
\name{skim_with}
\alias{skim_with}
\alias{get_default_skimmers}
\title{Set or add the summary functions for a particular type of data}
\usage{
skim_with(..., append = TRUE)

get_default_skimmers()
}
\arguments{
\item{...}{One or more \code{skimmer_function_list} objects, with an argument name
that matches a particular data type.}

\item{append}{Whether the provided options should be in addition to the
defaults already in \code{skim}. Default is \code{TRUE}.}
}
\value{
A new \code{skim()} function. This is callable. See \code{\link[=skim]{skim()}} for
more details.
}
\description{
While skim is designed around having an opinionated set of defaults, you
can use these functions to change the summary statistics that it returns.
To do that, provide type you wish to change as an argument to this function,
along with a list of named functions that you want to use instead of the
defaults.
}
\details{
\code{skim_with()} is a closure: a function that returns a new function. This
lets you have several skimming functions in a single R session, but it
also means that you need to assign the return of \code{skim_with()} before
you can use it.

You assign values within \code{skim_with} by using the \code{\link[=sfl]{sfl()}} helper (\code{skimr}
function list). This helper behaves mostly like \code{\link[dplyr:funs]{dplyr::funs()}}, but lets
you also identify which skimming functions you want to remove, by setting
them to \code{NULL}.
}
\section{Functions}{
\itemize{
\item \code{get_default_skimmers}: Get a list of classes with default skim functions
}}

\examples{
# Use new functions for numeric functions. If you don't provide a name,
# one will be automatically generated.
my_skim <- skim_with(numeric = sfl(median, mad), append = FALSE)
my_skim(faithful)

# If you want to remove a particular skimmer, set it to NULL
# This removes the inline histogram
my_skim <- skim_with(numeric = sfl(hist = NULL))
my_skim(faithful)

# This works with multiple skimmers. Just match names to overwrite
my_skim <- skim_with(numeric = sfl(iqr = IQR, p25 = NULL, p75 = NULL))
my_skim(faithful)

# Alternatively, set `append = FALSE` to replace the skimmers of a type.
my_skim <- skim_with(numeric = sfl(mean = mean, sd = sd), append = FALSE)

# Skimmers are unary functions. Partially apply arguments during assigment.
# For example, you might want to remove NA values. Use `dplyr::funs()`
# syntax for partial application.
my_skim <- skim_with(numeric = sfl(iqr = IQR(., na.rm = TRUE)))

# Or, use the `.args` argument from `dplyr::funs()`
my_skim <- skim_with(numeric = sfl(median, mad, .args = list(na.rm = FALSE)))

# Set multiple types of skimmers simultaneously.
skim2 <- skim_with(numeric = sfl(mean), character = sfl(length))

# Or pass the same as a list
my_skimmers <- list(numeric = sfl(mean), character = sfl(length))
my_skim <- skim_with(!!!my_skimmers)
}
